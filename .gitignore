const { REST } = require('@discordjs/rest');
const { Routes } = require('discord-api-types/v9');
const { token, clientId, guildId } = require('./index.js');
const { Client, Intents, UserFlags  } = require('discord.js');
const client = new Client({ intents: myIntents });
const myIntents = new Intents(['GUILDS', 'FLAGS']);


const rest = new REST({ version: '9' }).setToken(token);
console.log("Connexion au bot...");

const commands = [{
    name: 'tempban',
    description: 'Bannir un utilisateur temporairement',
    options: [{
        name: 'user',
        description: "L'utilisateur à bannir",
        type: 'USER',
        required: true,
    }, {
        name: 'duration',
        description: "La durée du bannissement temporaire (ex: 1d, 2h, 30m)",
        type: 'STRING',
        required: true,
    }, {
        name: 'reason',
        description: "La raison du bannissement",
        type: 'STRING',
    }],
}];


client.once('ready', async () => {
    console.log('Prêt !');

    await rest.put(Routes.applicationGuildCommands(clientId, guildId), { body: commands })
        .then(() => console.log('Commandes enregistrées !'))
        .catch(console.error);
});

client.on('interactionCreate', async (interaction) => {
    if (!interaction.isCommand()) return;

    if (interaction.commandName === 'tempban') {
        const user = interaction.options.getUser('user');
        const duration = interaction.options.getString('duration');
        const reason = interaction.options.getString('reason');

        // Vérifier les autorisations de l'utilisateur
        if (!interaction.member.permissions.has('BAN_MEMBERS')) {
            return interaction.reply({ content: 'Vous n\'êtes pas autorisé à bannir des utilisateurs', ephemeral: true });
        }

        // Vérifier que l'utilisateur à bannir est membre du serveur
        const member = interaction.guild.members.cache.get(user.id);
        if (!member) {
            return interaction.reply({ content: 'Cet utilisateur n\'est pas membre de ce serveur', ephemeral: true });
        }

        // Calculer la durée du bannissement en millisecondes
        const durationRegex = /(\d+)([smhd])/g;
        let matches;
        let durationMs = 0;
        while ((matches = durationRegex.exec(duration)) !== null) {
            const [_, amount, unit] = matches;
            switch (unit) {
                case 's':
                    durationMs += amount * 1000;
                    break;
                case 'm':
                    durationMs += amount * 60 * 1000;
                    break;
                case 'h':
                    durationMs += amount * 60 * 60 * 1000;
                    break;
                case 'd':
                    durationMs += amount * 24 * 60 * 60 * 1000;
                    break;
            }
        }

        // Mute the user
        try {
            await member.roles.add('MUTE_ROLE_ID'); // replace MUTE_ROLE_ID with the ID of the role you want to use for muting
            setTimeout(() => {
                member.roles.remove('MUTE_ROLE_ID');
           

                }, durationMs);
                return interaction.reply({ content: `**${user.tag}** a été muté temporairement pour ${duration} avec succès.`, ephemeral: true });
            } catch (error) {
                console.error(error);
                return interaction.reply({ content: 'Une erreur est survenue lors du mute temporaire', ephemeral: true });
            }
        }


    }
)
bot.login('MY TOKEN BOT');
